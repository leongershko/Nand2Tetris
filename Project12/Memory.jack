// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int base, max, length, nextN, end;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let max = 16384;
        let base = 2048;
        let memory = 0;
        let nextN = base + 1;
        let length = base;
        let end = -1;
        let memory[nextN] = end;
        let memory[length] = max - base;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int curr, prev, next, retAdd;
        let curr = length;
        let prev = length;
        let next = nextN;
        let retAdd = -1;

        while ((memory[curr] < size + 1) & ~(memory[next] = end)) { //didn't find the good-size
            let prev = curr;
            let curr = memory[next];
            let next = memory[next+1];
        }

        if (~(next = end)) { // find the right-seg-with-size | finished_without
            if (curr < (3+size)) { //good
                let memory[prev + 1] = memory[curr + 1];
                let retAdd = curr + 1;
                let memory[curr] = size + 1; 

            }
            else { //didn't find
                let memory[curr] = memory[curr] - size -1;
                let retAdd = curr + memory[curr];
                let memory[retAdd-1] = size + 1;
            }
        }
        return retAdd;


        }




    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeLis
        let memory[o] = memory[o-1];
        let memory[o + 1] = memory[length + 1];
    	let memory[length + 1] = o;
    	return;
    }   

       

    /** Returns the maximal element contained in the given Array/object. 
     * Assume inputs are initialized and contain at least one element. */
	function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        
        // todo need to check if in range of mem??
        var int sizeofob, i, max, temp;
        let sizeofob = Memory.peek(o-1);
        let max = Memory.peek(o); //init max to first item
        let i = 1;

        while ( (i < sizeofob - 1) ) {
            let temp =  Memory.peek(o+i);
            if (max < temp) {
                let max = temp;
            } 
            let i = i + 1;
        }
        return max;
    }
}
