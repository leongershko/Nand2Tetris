// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array obj;
	static int resy;
		
    /** Initializes the library. */
    function void init() {
		var int ind, num;
		let obj = Array.new(16);
		let ind = 0;
		let num = 1;
		while (ind < 16) {
			let obj[ind] = num;
			let ind = ind + 1;
			let num = ^num; 
		}
		return;
	
    }
	function int two_to_the(int power) {
        return obj[power];
    }
   function boolean bit(int x, int i) {
        return ~((x & obj[i]) = 0);
    }
    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x > 0) {
			return x;
		}
		else {
			return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
	 function boolean signMult(int x,int y) { 
		if (((x > 0) & (y>0)) | ((x < 0) & (y<0))) {
			return true;
		}
		else {
		return false;
		}
	 }
		
	 
    function int multiply(int x, int y) {
		var int sum, ind, shiftedX;
		var boolean sign;
		// Init the args 
		let sign = Math.signMult(x,y);

		
		let y = Math.abs(y);
		let x = Math.abs(x);
		
		
		
		let ind = 0;
		let sum = 0;
		let shiftedX = x;
		while (ind < 16) {
			//check the ith' bit of y == 1 
			if (Math.bit(y, ind)) {
				let sum = sum + shiftedX;
			}
            let shiftedX = ^shiftedX;
            let ind = ind + 1;
        }
		if (sign) {
			return sum;
		}
		return -sum; 
	
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
	 function int divHelp (int x, int y) {
		var int q, shiftL;
		if (y<0) {
			return 0;
		}
		let resy = 0;
		if (y>x) {
			return 0;
		}
		
		let q = Math.divHelp(x, (^y));
		let shiftL = (^q);
		if ((x-resy) < y) {
			return shiftL;
		}
		else {
			let resy = resy + y;
			return shiftL + 1;
		}
	 
	 }
	 
    function int divide(int x, int y) {
		// This should be implemented without using multiplication.
		// Hint: updating the value of 2*q*y in the "if" statement requires
		// at most a single addition operator at every recursion step.
        var int res;
		var boolean sign;
	
		let sign = Math.signMult(x,y);
        let x = Math.abs(x);
        let y = Math.abs(y);
		let res = Math.divHelp(x,y);
		
		if (sign) {
			return res;
		}
		else {
            return -res;
			
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		// This should be implemented without using division, but
		// multiplication is allowed.
        var ind ind, y, appx, appsq;
		
		if (x < 0) { 
			do Sys.error("Cannot compute square root of a negative number");
			return 0;
		}
		
        let ind = 7; // ((bits / 2 )- 1 )
        let y = 0;

        while (ind > -1 ) {
            let appx =  obj[ind] + y;
            let appsq = Math.multiply(appx,appx); // (y+2)^2

            if ((appsq > 0) & ((appsq < x) | (appsq = x))) {
                let y =  appx;
            }
            let ind = ind - 1;

        }
        return y;

    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a> b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}