// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array bit16;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
        var int i,val;
        let color = true;
        let screen = 16384;
        let i = 0;
        let val = 1;
        let bit16 = Array.new(16);
        while( i < 16){
            let bit16[i] = val;
            let i = i + 1;
            let val = val + val;
        }
        return;
    }

    /** Erases the entire screen. */
   function void clearScreen() {
        var int j;
        let j = 0;
        while(j < 8192){
            do Memory.poke(screen+j, 0);
            let j = j + 1;
        }
        return;
    }



    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }
	
	function int mult32(int x){
		var int i;
		let i = 0;
		while(i < 5){
			let x = ^x;
			let i = i + 1;
		}
		return x;
	}	
	

	
    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr,value,bit, new_val, mod;
        let addr = 16384 + Screen.mult32(y) + (x / 16);

        let value = Memory.peek(addr);

        // set x%16th bit of value to the curr color
        let bit = x&15;

        
        if(color){
			let value = value | bit16[bit];}
        //white
        else{
			let value = value & ~bit16[bit];
		}
		do Memory.poke(addr,value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp, diff, addr1;
        var int a, b;
		var boolean checker;
        let a = 0;
        let b = 0;
		let diff = 0;

        //x1 Always smaller so switch points if x1 >= x2
        if (~(x1 < x2) ){
            //change X's
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            //change Y's
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

		// draw Horizontal Line
        if(dy = 0){
			let addr1 = 16384 + (32 * y1) + (x1 / 16);
			while (~(x1 > x2)) {
			let diff= x2 - x1;
			if ((diff&15 = 0) & (diff=-1)) { 
				do Memory.poke(addr1, color);
				let x1 = x1 + 16;
				let addr1 = addr1 + 1;
			} 
			else {
				do Screen.drawPixel(x1, y2);
				let x1 = x1 + 1;
			}
		}
			return;
		
		}


		if(dy < 0){
            let checker = true;
			let dy = -dy; 
        }
   
        while(~(a > dx) & (~(b > dy)) ){
			if (checker) {
				do Screen.drawPixel(x1+a, y1-b);
			}
			else {
				do Screen.drawPixel(x1+a, y1+b);
			}
			if (diff < 0) {
				let a = a+1;
				let diff = diff + dy;
			}
			else {
				 let b = b+1;
				 let diff = diff - dx;
			}
		}
		return;
	}
            

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int b, dy;
        
        let b = 0;
        let dy = Math.abs(y2 - y1);
        while (b < dy){
			do Screen.drawLine(x1, y1 + b, x2, y1+ b);
			let b = b + 1;                
            }

        return;      
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int x1, x2;

        //prevent overFlow
        // if(r>181){return;}

        let dy = -r;

        while (~(dy = r)){
            let x1 = x - Math.sqrt( (r*r) - (dy*dy) );
            let x2 = x + Math.sqrt( (r*r) - (dy*dy) );
            do Screen.drawLine(x1, y + dy, x2 , y + dy );
            let dy = dy + 1;
        }
        return;
    }
}
