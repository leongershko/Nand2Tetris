// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
	 
     ALU(x =x , y =y ,
	 zx = instruction[5],
	 nx = instruction[4],
	 zy = instruction[3],
	 ny = instruction[2],
	 f = instruction[1], 
	 no = instruction[0],
	 out = outALU, zr = outzr, ng = outng);
	 
	 //RegularALU
	 And(a=instruction[7], b=instruction[8], out=out78);
	 
	 
	 //regular output shifted output 1
	 //Mux16(a=, b = outALU,sel = instruction[7] out = outMux1);
	 
	 
	 //x or y shift
	 Mux16(a=y, b =x ,sel = instruction[4] ,out = outxy);
	 
	 
	 //shift right shift left 2 
	  ShiftLeft(in=outxy,out=outleft);
	  ShiftRight(in=outxy,out=outright);
	  
	  Mux16(a=outright, b = outleft ,sel = instruction[5] ,out = outshifted);
	  
	  
	  Mux16(a=outshifted,b=outALU, sel=out78, out=out,  out[15]=outer3, out[0..7]=outer1, out[8..15]=outer2);
	  Or (a=outer3, b=false, out=ng);

	  Or8Way (in=outer1, out=one);
	  Or8Way (in=outer2, out=two);
	  Or (a=one, b=two, out=res);
	  Mux (a=true, b=false, sel=res, out=zr);
	  }

