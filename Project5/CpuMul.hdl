// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put you code here:
	And(a=instruction[15], b=instruction[3], out=writeM);
	
	
	
	
	
	//C instruction and instruction 14 =0
	// new beahvior if newCpu=0
	Not(in=instruction[15],out=notC);
	And(a=notC,b=instruction[14], out=newCpu);
	
	
	//ARegister
	Not(in=instruction[15], out=not);
    Mux16(a=instruction, b=outALU , sel=instruction[15], out=OUTM1);
	// A instruction or C insturction
	Mux(a=true,b=instruction[5],sel=instruction[15],out=loadA);  //loadA = ALoadBit
	ARegister(in=OUTM1 ,load=loadA ,out=outA,out[0..14]=addressM);
	
	//ExtendALU
	And(a=instruction[14], b =instruction[13], out=out1314); // out1314 = cpu1
	//Or(a=instruction[15], b=out1314,out=regularALU); //***************************************
	Mux16(a=outA, b=inM , sel=instruction[12], out=OutM2);
	ExtendAlu(x=outD , y=OutM2 , instruction=instruction[6..14] ,out=outALU, out=outM ,zr = zrOut, ng= ngOut);
	
	
	//DRegister
	And(a=instruction[15], b=instruction[4],out=D);
	DRegister(in=outALU ,load=D ,out=outD);
	
	And(a=instruction[0],b=instruction[15],out=j3);                             // if instruction[15] = 1 and instruction[0]: j3=1 
    And(a=instruction[1],b=instruction[15],out=j2);                             // if instruction[15] = 1 and instruction[1]: j2=1 
    And(a=instruction[2],b=instruction[15],out=j1);								// if instruction[15] = 1 and instruction[2]: j1=1
	
	//Decides if the programs jumps or continues + C instruction
	Not(in=ngOut, out=pos);
    Not(in=zrOut, out=nzr);
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=pos, b=nzr, out=posnzr);
    And(a=jgt, b=posnzr, out=ld1);

    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=jeq, b=zrOut, out=ld2);

    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=jlt, b=ngOut, out=ld3);

    Or(a=ld1, b=ld2, out=ldt);
    Or(a=ld3, b=ldt, out=ld);
	
	PC(in =outA , load =ld , inc = true, reset = reset, out[0..14] = pc);
	
}
